// collection of handy methods used by the other scripts in this directory

// Resize a picture WITH scaled styles
// app.activedocument.resizeImage() does NOT scale sizes
// so this code was generated by scripting listener plug-in
// preserves aspect ratio
function resizeActiveDocument(newWidth) {
    var idImgS = charIDToTypeID("ImgS");
    var desc4 = new ActionDescriptor();
    var idWdth = charIDToTypeID("Wdth");
    var idPxl = charIDToTypeID("#Pxl");
    desc4.putUnitDouble(idWdth, idPxl, newWidth);
    var idscaleStyles = stringIDToTypeID("scaleStyles" );
    desc4.putBoolean(idscaleStyles, true);
    var idCnsP = charIDToTypeID( "CnsP" );
    desc4.putBoolean( idCnsP, true );
    var idIntr = charIDToTypeID( "Intr" );
    var idIntp = charIDToTypeID( "Intp" );
    var idautomaticInterpolation = stringIDToTypeID( "automaticInterpolation" );
    desc4.putEnumerated( idIntr, idIntp, idautomaticInterpolation );
    executeAction( idImgS, desc4, DialogModes.NO );
}

/* returns files in the given directory whose names match the given
regular expression */
function getFileNamesThatContain(path, re) {
    var topFolder = new Folder(path);
    var files = topFolder.getFiles();

    var expression = new RegExp(re);
    var filesThatMatch = [];
    for (var i = 0; i < files.length; i++) {
        if (expression.test(files[i])) {
            filesThatMatch[filesThatMatch.length] = files[i];
        }
    }
    return filesThatMatch;
}

function changeCanvasSize(newWidth, newHeight, newBgColor) {
    var oldBgColor = app.backgroundColor; 
    app.backgroundColor = newBgColor;
    
    var idCnvS = charIDToTypeID( "CnvS" );
    var desc2126 = new ActionDescriptor();
    var idWdth = charIDToTypeID( "Wdth" );
    var idPxl = charIDToTypeID( "#Pxl" );
    desc2126.putUnitDouble( idWdth, idPxl, newWidth );
    var idHght = charIDToTypeID( "Hght" );
    var idPxl = charIDToTypeID( "#Pxl" );
    desc2126.putUnitDouble( idHght, idPxl, newHeight );
    var idHrzn = charIDToTypeID( "Hrzn" );
    var idHrzL = charIDToTypeID( "HrzL" );
    var idCntr = charIDToTypeID( "Cntr" );
    desc2126.putEnumerated( idHrzn, idHrzL, idCntr );
    var idVrtc = charIDToTypeID( "Vrtc" );
    var idVrtL = charIDToTypeID( "VrtL" );
    var idCntr = charIDToTypeID( "Cntr" );
    desc2126.putEnumerated( idVrtc, idVrtL, idCntr );
    var idcanvasExtensionColorType = stringIDToTypeID( "canvasExtensionColorType" );
    var idcanvasExtensionColorType = stringIDToTypeID( "canvasExtensionColorType" );
    var idBckC = charIDToTypeID( "BckC" );
    desc2126.putEnumerated( idcanvasExtensionColorType, idcanvasExtensionColorType, idBckC );
    executeAction( idCnvS, desc2126, DialogModes.NO );
    
    app.backgroundColor = oldBgColor;
}

// saves the file as a png with the given name and destination
function saveFile(fileName, destination) {
    try {
        // code generated by scripting listener plug-in
        var idsave = charIDToTypeID("save");
        var desc7 = new ActionDescriptor();
        var idAs = charIDToTypeID("As  ");
        var desc8 = new ActionDescriptor();
        var idPGIT = charIDToTypeID("PGIT");
        var idPGIT = charIDToTypeID("PGIT");
        var idPGIN = charIDToTypeID("PGIN");
        desc8.putEnumerated(idPGIT, idPGIT, idPGIN);
        var idPNGf = charIDToTypeID("PNGf");
        var idPNGf = charIDToTypeID("PNGf");
        var idPGAd = charIDToTypeID("PGAd");
        desc8.putEnumerated(idPNGf, idPNGf, idPGAd);
        var idCmpr = charIDToTypeID("Cmpr");
        desc8.putInteger(idCmpr, 0);
        var idPNGF = charIDToTypeID("PNGF");
        desc7.putObject(idAs, idPNGF, desc8);
        var idIn = charIDToTypeID("In  ");
        desc7.putPath(idIn, new File(destination + "/" + fileName));
        var idDocI = charIDToTypeID("DocI");
        desc7.putInteger(idDocI, 1487);
        var idCpy = charIDToTypeID("Cpy ");
        desc7.putBoolean(idCpy, true);
        var idLwCs = charIDToTypeID("LwCs");
        desc7.putBoolean(idLwCs, true);
        var idsaveStage = stringIDToTypeID("saveStage");
        var idsaveStageType = stringIDToTypeID("saveStageType");
        var idsaveSucceeded = stringIDToTypeID("saveSucceeded");
        desc7.putEnumerated(idsaveStage, idsaveStageType, idsaveSucceeded);
        executeAction(idsave, desc7, DialogModes.NO);
    }
    catch (error) {
        alert("Unable to export " + fileName);
    }
}

// Saves the app.activeDocument as a jpg with the given file name in the given folder
function saveJpg(destinationFolder, fileName) {
    var jpgOptions = new JPEGSaveOptions();
    jpgOptions.quality = 8;
    jpgOptions.embedColorProfile = true;
    jpgOptions.formatOptions = FormatOptions.PROGRESSIVE;
    if(jpgOptions.formatOptions == FormatOptions.PROGRESSIVE){
    jpgOptions.scans = 5};
    jpgOptions.matte = MatteType.NONE;
    app.activeDocument.saveAs (new File(destinationFolder +'/' + fileName + '.jpg'), jpgOptions);
}

function getLayerSetNamed(name) {
    var sets = app.activeDocument.layerSets;
    for (var i = 0; i < sets.length; i++ ) {
        if (sets[i].name == name)
            return sets[i];
    }
    return undefined;
}

function getFirstLayerWithName(name) {
    var layers = app.activeDocument.artLayers
    for (var i = 0; i < layers.length; i++) {
        if (layers[i].name == name) {
            return layers[i];
        } 
    }
    return undefined;
}

function selectPixelsOnActiveLayer() {
    sTT = stringIDToTypeID;

    (ref1 = new ActionReference()).putProperty(c = sTT('channel'), sTT('selection'));
    (dsc = new ActionDescriptor()).putReference(sTT('null'), ref1);
    (ref2 = new ActionReference()).putEnumerated(c, c, sTT('transparencyEnum'))
    dsc.putReference(sTT('to'), ref2), executeAction(sTT('set'), dsc);
}

function contractActiveLayer(amount) {
    selectPixelsOnActiveLayer();
    app.activeDocument.selection.contract(amount);
    app.activeDocument.selection.invert();
    app.activeDocument.selection.clear();
    app.activeDocument.selection.deselect();
}

// Returns an object that represents options set in the given descriptor;
// for persitent options
function getOptionsFromDescriptor(desc) {
    var options = new Object();
    for (var i = 0; i < desc.count; i++ ) {
        var descKey = desc.getKey(i); 
        var type = desc.getType(descKey);
        var key = app.typeIDToStringID(descKey);
        
        switch (type) {
            case DescValueType.BOOLEANTYPE:
                options[key] = desc.getBoolean(descKey);
                break;
            case DescValueType.STRINGTYPE:
                options[key] = desc.getString(descKey);
                break;
            case DescValueType.DOUBLETYPE:
                options[key] = desc.getDouble(descKey);
                break;
        }
    }
    return options;
}

// Returns a descriptor that represents the given options;
// for persitent options
function getDescriptorFromOptions(options) {
    var desc = new ActionDescriptor();  
    for (key in options) {
        keyID = app.stringIDToTypeID(key);
        
        if ((typeof(options[key])).indexOf("number") != -1) {
            desc.putDouble(keyID, options[key]);
        }
        else if ((typeof(options[key])).indexOf("boolean") != -1) {
            desc.putBoolean(keyID, options[key]);
        }
        else {
            desc.putString(keyID, options[key].toString());
        }
    }
    
    return desc;
}



// select color range functions
function cTID(s) { return app.charIDToTypeID(s); }
function sTID(s) { return app.stringIDToTypeID(s); }

function RGBc(r, g, b) {
    var color = new ActionDescriptor();
        color.putDouble( cTID("Rd  "), r);
        color.putDouble( cTID("Grn "), g);
        color.putDouble( cTID("Bl  "), b);   
    return color
}

function selectColorRange(color1, color2){
    var desc = new ActionDescriptor(); 
    desc.putInteger(cTID("Fzns"), 0 ); 
    desc.putObject( cTID("Mnm "), cTID("RGBC"), color1 ); 
    desc.putObject( cTID("Mxm "), cTID("RGBC"), color2 ); 
    executeAction( cTID("ClrR"), desc, DialogModes.NO );
}